import csvimport getGamesfrom datetime import datetimefrom heavyweightClasses import Team,Game,Reignimport osimport shutil#main - run programdef main():    boutList,historyTeamList,activeTeamList=createMasterFile()    champList=yearlyNationalChamps(boutList)    updateTeams(boutList,historyTeamList,champList)    historyTeamList=dropInactiveTeamsWithNoHistory(activeTeamList,historyTeamList)    createOtherLinks(boutList,activeTeamList,historyTeamList,champList)    beltTeam=getBeltTeam(boutList,historyTeamList)    createWebpage('Webpage/cfbHeavyweights.html',boutList,activeTeamList,historyTeamList,champList)def writeSchoolBySchool(page,teamList):    data=""    for team in teamList:        cW,cL,cT,dW,dL,dT,numReigns,titles=team.records()        data+="*******\n"        data+=f"{team.name} Belt History"        data+=f"\n\tNational Titles: {titles}"        if titles==0:            data+=f"\n"        else:            data+=f" - {team.getTitleString()}\n"        data+=f"\tNumber of Reigns: {numReigns}\n"        data+=f"\tRecord in Bouts: {cW+dW}-{cL+dL}-{cT+dT}\n"        data+=f"\t\tAs Belt Holder: {dW}-{dL}-{dT}\n"        data+=f"\t\tAs Challenger : {cW}-{cL}-{cT}\n"        data+="\n\n"    printFile(data,page)def dropInactiveTeamsWithNoHistory(active,historical):    return [team for team in active] + [team for team in historical if team not in active and len(team.challenges) > 0]#create files for reportsdef createOtherLinks(boutList,activeTeamList,historyTeamList,champList):    topN(historyTeamList,len(historyTeamList),"Webpage/allTimeRankings.txt")    topN(activeTeamList,25,"Webpage/top25Active.txt")    printAllBouts(boutList,"Webpage/allBouts.txt")    longestReigns(historyTeamList,"Webpage/longestReigns.txt")    writeSchoolBySchool("Webpage/schoolBySchool.txt",historyTeamList)def longestReigns(teamList,outputFile=None):    reignList=createReignList(teamList)    sortedReignList=sorted(reignList,key=lambda x:x[0],reverse=True)    sortedReignList=[x for x in sortedReignList if x[0]>=10]    data=f"{'Games':<7}{'Team':<22}{'Start':<16}{'End':<16}\n"    for r in sortedReignList:        data+=f"{r[0]:<7}{r[1]:<22}{r[2]:<16}{r[3]:<12}\n"    printFile(data,outputFile)def createReignList(teamList):    reignList=[]    for team in teamList:        if team.currentReign:                reignList.append(team.currentReign.quickSum())        for reign in team.reigns:            reignList.append(reign.quickSum())    return reignListdef stuffToPlaceElsewhere(boutList,historyTeamList,activeTeamList,champList):    #printAllBouts(boutList)    #basicStats(historyTeamList)    #basicStats(activeTeams)    #mostReigns(historyTeamList,1)    #mostWins(historyTeamList,0)    topN(activeTeamList,25)    #print("\n")    #topN(historyTeamList,25)                       #302 total teams    printCurrentChamp(boutList,historyTeamList)    #summarizeYearlyTitles(champList,activeTeams)#take all this data and turn it into a webpagedef createWebpage(webpage,boutList,activeTeamList,historyTeamList,champList):    preamblePage='Webpage/preamble.txt'    beltTeam=getBeltTeam(boutList,historyTeamList)    writePreamble(preamblePage,historyTeamList,beltTeam)    preamble(preamblePage,webpage)    writeChampInfo(webpage,beltTeam)    writeCurrentReign(webpage,beltTeam)    writePreviousReigns(webpage,beltTeam)    writeChallenges(webpage,beltTeam)    otherLinks(webpage)def findNth(num):    if 11<=num %100<=13:        return f"{num}th"    lastDigit=num%10    if lastDigit==1:        return f"{num}st"    elif lastDigit==2:        return f"{num}nd"    elif lastDigit==3:        return f"{num}rd"    else:        return f"{num}th"def writePreamble(page,historyTeamList,beltTeam):    numReigns=getTotalReigns(historyTeamList)    numReigns=findNth(numReigns)    html_content = f"""<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>College Football Heavyweight Championship</title>    <style>        body {{            font-family: 'Georgia', serif;            line-height: 1.6;            margin: 0;            padding: 0;            background-color: #f4f4f9;        }}        .container {{            max-width: 80%;            margin: 0 auto;            padding: 20px;            background-color: #ffffff;            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);        }}        .center-image {{            text-align: center;            margin-bottom: 20px;        }}        .center-image img {{            width: 400px;            height: 300px;            object-fit: contain;        }}        .preamble {{            text-align: justify;            margin-top: 20px;        }}        .small-table-container {{            max-width: 40%;            margin: 0 auto;        }}        .champ-header {{            text-align: center;            padding: 10px 0;            background-color: #2c3e50; /* Subtle navy */            color: #ecf0f1; /* Light gray text */            margin-bottom: 10px;            font-size: 1.3em;            letter-spacing: 1px;            width: 100%;            box-sizing: border-box;        }}        .table {{            margin: 10px 0;            border-collapse: collapse;            width: 100%;        }}        .table th, .table td {{            border: 1px solid #ddd;            padding: 8px;            text-align: left;        }}        .table th {{            background-color: #f2f2f2;        }}        .links-container {{            display: flex;            justify-content: space-between;            margin-top: 20px;        }}        .links-column {{            width: 45%;        }}        .links-column a {{            display: block;            margin-bottom: 10px;            text-decoration: none;            color: #34495e; /* Dark, muted blue */            font-weight: bold;            transition: color 0.3s;        }}        .links-column a:hover {{            color: #2980b9; /* Brighter blue on hover */        }}    </style></head><body>    <div class="container">        <div class="center-image">            <img src="theChamp.jpeg" alt="Championship Image">        </div>        <div class="preamble">            In boxing (and other sports), one becomes the champ by beating the champ. And they remain the champ until someone takes it from them.             What if college football did this? On November 6, 1869 Rutgers defeated Princeton 6-4 (in a game that more closely resembled soccer than             what we’d call football, but we’re counting it anyway), winning the first College Football Heavyweight Bout. Princeton would win the             rematch 8-0 to take back the Belt. Since then, I’ve tracked the progress of the Belt and all the challenges for it. The {numReigns} (and current)             Heavyweight Champion of College Football is {beltTeam}.        </div>    </div></body></html>"""    with open(page,'w') as file:        file.write(html_content)def preamble(preamblePage,outpage):    with open(preamblePage,'r') as infile,open(outpage,'w') as outfile:        for line in infile:            outfile.write(line)def writeCurrentReign(webpage,beltTeam):    currentReign=beltTeam.currentReign    reignLength=len(currentReign.games)    gs="game" if reignLength==1 else "games"    with open(webpage,'a') as file:        file.write("<h3>***Current Reign***</h3\n")        file.write(f"        <p>{reignLength} {gs}</p>\n")        file.write("        <ul>\n")        for game in currentReign.games:            file.write(f"            <li>{str(game)}</li>\n")        file.write("        </ul>\n\n")def writePreviousReigns(webpage,beltTeam):    reigns=beltTeam.reigns    numReigns=len(reigns)    with open(webpage,'a') as file:        file.write("<h3>Previous Reigns:</h3>\n")        for reign in reversed(reigns):            reignGames=reign.games            file.write(f"        <h4>Reign #{numReigns}</h4>\n")            file.write("        <ul>\n")            for game in reignGames:                file.write(f"            <li>{str(game)}</li>\n")            file.write("        </ul>\n\n")            numReigns-=1def writeChallenges(webpage,beltTeam):    challenges=beltTeam.challenges    numChall=len(challenges)    gs="time" if numChall==1 else "times"    numWins=beltTeam.numReigns    with open(webpage,'a') as file:        file.write("    <h3>Challenges:</h3>\n")        file.write(f"    <p>{beltTeam.getName()} has challenged {numChall} {gs}, winning {numWins}:</p>\n")        file.write("        <ul>\n")        for game in challenges:            winner=game.winnerWas(beltTeam.getName())            if winner:                file.write(f"        <li><strong>{str(game)}</strong></li>\n")                else:                file.write(f"        <li>{str(game)}</li>\n")        file.write("    </ul>\n\n")def otherLinks(webpage):    column1Links=[        ('All-Time Rankings','allTimeRankings.txt'),        ('School Reports','schoolBySchool.txt'),        ('Longest Reigns','longestReigns.txt')    ]    column2Links=[        ('Top 25 (Active FBS)','top25Active.txt'),        ('Yearly National Champions','yearlyBeltWinners.txt'),        ('All Bouts','allBouts.txt')    ]    with open(webpage,'a') as file:        file.write("<h3>Reports:</h3>")        file.write("    <!-- Links in Two Columns -->\n")        file.write("    <div class=\"links-container\">\n")        file.write("        <div class=\"links-column\">\n")        #First Column of Links        for text, href in column1Links:            file.write(f"            <a href=\"{href}\">{text}</a>\n")        file.write("        </div>\n")        # Second column of links        file.write("        <div class=\"links-column\">\n")        for text, href in column2Links:            file.write(f"            <a href=\"{href}\">{text}</a>\n")        file.write("        </div>\n")        # Close the links container        file.write("    </div>\n\n")        file.write(f"Compiled {datetime.now().strftime('%Y-%m-%d')}")def writeChampInfo(webpage,beltTeam):    cW,cL,cT,dW,dL,dT,numReigns,natties=beltTeam.records()    with open(webpage,'a') as file:        file.write("        <!-- Smaller Table Container -->")        file.write("        <div class=\"small-table-container\">")        file.write("\n")        file.write("            <!-- Champ Header above the table -->")        file.write("            <div class=\"champ-header\">")        file.write("                Current Champ")        file.write("            </div>")        file.write("\n")        file.write("            <!-- Text Content -->")        file.write("            <div class=\"text-content\">")        file.write("\n")        file.write("                <table class=\"table\">")        file.write("                    <tr>")        file.write("                        <th>School</th>")        file.write(f"                        <td>{beltTeam.getName()}</td>")         file.write("                    </tr>")        file.write("                    <tr>")        file.write("                        <th>Number of Reigns</th>")        file.write(f"                        <td>{beltTeam.numReigns}</td>")        file.write("                    </tr>")        file.write("                    <tr>")        file.write("                        <th>National Titles</th>")        if natties>0:            file.write(f"                        <td>{natties} – ({beltTeam.getTitleString()})</td>")        else:            file.write(f"                        <td>0</td>")        file.write("                    </tr>")        file.write("                    <tr>")        file.write("                        <th>Record in Bouts</th>")        file.write(f"                        <td>{dW+cW}-{dL+cL}-{dT+cT}</td>")        file.write("                    </tr>")        file.write("                    <tr>")        file.write("                        <th>As Belt Holder</th>")        file.write(f"                        <td>{dW}-{dL}-{dT}</td>")        file.write("                    </tr>")        file.write("                    <tr>")        file.write("                        <th>As Challenger</th>")        file.write(f"                        <td>{cW}-{cL}-{cT}</td>")        file.write("                    </tr>")        file.write("                </table>")        file.write("\n")        file.write("            </div>")        file.write("\n")        file.write("        </div>")def getBeltTeam(boutList,teamList):    lastBout=boutList[-1]    winner,loser=lastBout.getWinnerLoser()    return findTeam(teamList,winner)def printCurrentChamp(boutList,teamList):    ordinalReign=ordinalSuffix(getTotalReigns(teamList))    lastBout=boutList[-1]    winner,loser=lastBout.getWinnerLoser()    beltTeam=findTeam(teamList,winner)    print(f"The {ordinalReign} Heavyweight Champion is {winner}")    beltTeam.basicStatSum()    print(f"This is {winner}'s {ordinalSuffix(beltTeam.numReigns)} reign")    print("Matchups from current reign: ")    beltTeam.getLastReign().printGames()    print(f"\n\n***Previous Reigns for {winner}")    beltTeam.printAllReigns()    beltTeam.printChallenges()#create lists of bouts, historical teams, active teams#update current season game filedef createMasterFile():    #initialize    historyTeamList=[]    boutList=[]    champ=None    lastYear=getCurrentSeason()    #update file?    if updateMostRecentGames(lastYear):        getGamesAndTeams(lastYear)    #create masterfiles    for season in range(1869,lastYear+1):        if season==1871:            continue        gameFile="Games/%sGames.csv" % season        teamFile="Teams/%sTeams.csv" % season        seasonTeamList=findSeasonTeams(teamFile)        for team in seasonTeamList:            checkHistoryList(historyTeamList,season,team)        seasonGameList=processGameFile(season,gameFile,seasonTeamList)        champ=findBouts(boutList,seasonGameList,champ)    activeTeams=activeHistoryTeams(historyTeamList,seasonTeamList)    return boutList,historyTeamList,activeTeamsdef updateTeams(boutList,historyTeamList,champList):    processBouts(boutList,historyTeamList)    setStats(historyTeamList)    updateTeamTitles(champList,historyTeamList)#get current seasondef getCurrentSeason():    today=datetime.now()    if today.month<9:        return today.year-1    else:        return today.yeardef updateTeamTitles(champList,teamList):    for season in champList:        champ=findTeam(teamList,season[1])        champ.addNationalTitle(season[0])def updateMostRecentGames(year):    return False    lastRunFile="lastRun.csv"    if not os.path.exists(lastRunFile):        return True    with open(lastRunFile,'r') as f:        reader=csv.reader(f)        for row in reader:            year=int(row[0])            month=int(row[1])            day=int(row[2])            lastRun=datetime(year,month,day)            today=datetime.now()            if gamesPlayedBetweenDates(lastRun,today):                return True            else:                return False    return Falsedef gamesPlayedBetweenDates(lastRun,today):    #check if football season    #check if a Saturday has happened since last run    passdef getGamesAndTeams(year):    gameList=getGames.readGamesFromWeb(year)    getGames.writePlayedGamesFile(f"Games/{year}Games.csv",gameList)    if not os.path.exists(f"Teams/{year}Teams.csv"):        teamList=getGames.readTeamsFromWeb(year)        getGames.writeTeamFile(f"Teams/{year}Teams.csv",teamList)def yearlyNationalChamps(boutList):    champList=[]    currYear=1869    currChamp=None    for bout in boutList:        season=getSeason(bout)        winner=boutChamp(bout,currChamp)        #if we've entered a new season, crown last year's champ before updating the season        if season>currYear:                 champList.append((currYear,currChamp))            currYear=season        currChamp=winner    title2024=(2024,'Florida')    if title2024 not in champList:        import inspect        currLine=inspect.currentframe().f_lineno        print(f"Manually adding Florida's 2024 title at line {currLine} in {os.path.basename(inspect.getfile(inspect.currentframe()))}")        champList.append((2024,'Florida'))    return champList#curr champ keeps belt in a tie, otherwise it goes to the winnerdef boutChamp(bout,currChamp):    if bout.checkTie():        return currChamp    else:        winner,loser=bout.getWinnerLoser()        return winnerdef printYearlyChamps(champList):    for season in champList:        print(f"{season[0]} {season[1]} ")def summarizeYearlyTitles(champList,teamList=None):    teamNames=[x.getName() for x in teamList] if teamList!=None else None    #initialize dict    teamDict={}    #create dict data    for year,team in champList:        if (teamNames!=None) and (team not in teamNames):            continue        if team not in teamDict:            teamDict[team]={'titles':0,'years':[]}        teamDict[team]['titles']+=1        teamDict[team]['years'].append(str(year))    #sort dict    sortedTeams = sorted(teamDict.items(), key=lambda item: item[1]['titles'], reverse=True)    #create output    output = "Team".ljust(25) + "Titles".ljust(10) + "Years\n"    for team, info in sortedTeams:        titles = str(info['titles']).ljust(10)        years = ", ".join(info['years'])        output += team.ljust(25) + str(titles) + years + "\n"    #print output    print(output)def getSeason(bout):        date=bout.date        dayYear=date.split(",")        monthDay=dayYear[0].split(" ")        month=monthDay[0].strip()        year=dayYear[1].strip()        if month=="Jan":            return int(year)-1        else:            return int(year)def getTotalReigns(teamList):    return sum(team.numReigns for team in teamList)def ordinalSuffix(n):    if 10 <= n % 100 <= 20:  # Special case for 11th, 12th, 13th, etc.        suffix = 'th'    else:        # Handle general cases        last_digit = n % 10        if last_digit == 1:            suffix = 'st'        elif last_digit == 2:            suffix = 'nd'        elif last_digit == 3:            suffix = 'rd'        else:            suffix = 'th'        return f"{n}{suffix}"#number of reigns, challenges, record, ranking pointsdef setStats(historyTeamList):    for team in historyTeamList:        team.setStats()def basicStats(historyTeamList):    for team in historyTeamList:        team.basicStatSum()def mostReigns(historyTeamList,minVal=1):    print("Most reigns as Heavyweight Champ!")    print("Team                   Reigns     Wins")    historyTeamList.sort(key=lambda x:x.numReigns, reverse=True)    filtered=[x for x in historyTeamList if x.numReigns>=minVal]    for team in filtered:        print("%s %s %s" % (team.name.ljust(24),str(team.numReigns).ljust(8),str(team.beltWins).ljust(8)))def mostWins(historyTeamList,minVal=1):    print("Most wins in Heavyweight Bouts!")    print("Team                    Wins    Reigns")    historyTeamList.sort(key=lambda x:x.beltWins, reverse=True)    filtered=[x for x in historyTeamList if x.beltWins>=minVal]    for team in filtered:        print("%s %s %s" % (team.name.ljust(24),str(team.beltWins).ljust(8),str(team.numReigns).ljust(4)))def topN(historyTeamList,num=25,outputFile=None):    tableStr=f"All-Time Heavyweight Rankings\n"    historyTeamList.sort(key=lambda x:x.rankingPoints,reverse=True)    for i in range(num):        tableStr += historyTeamList[i].rankSummary(i)+"\n"    printFile(tableStr,outputFile)def printFile(data,outputFile):    if outputFile:        with open(outputFile,"w") as file:            file.write(data)    else:        print(data)def printAllBouts(boutList,outputFile=None):    data="Date            Defending           Challenger              Score      Beltholder\n"    for game in boutList:        data+=game.beltSum()+"\n"    printFile(data,outputFile)#update teams with bout information: reign and challenger informationdef processBouts(boutList,historyTeamList):    for game in boutList:        defending=game.defending        if defending==None:            vacantBelt(historyTeamList,game)        else:            if game.checkTie():                champDefendsWithTie(historyTeamList,game)            else:                winner,loser=game.getWinnerLoser()                if winner==defending or winner=="TIE":                    champDefends(historyTeamList,game)                else:                    newChamp(historyTeamList,game)#no need to support tie, it didn't happendef vacantBelt(historyTeamList,game):    winner,loser=game.getWinnerLoser()    belt=findTeam(historyTeamList,winner)    challenger=findTeam(historyTeamList,loser)    belt.startReign(game)    belt.addChallenge(game)    challenger.addChallenge(game)def champDefends(historyTeamList,game):    belt,challenger=getBeltAndChallenge(historyTeamList,game)    belt.addToReign(game)    challenger.addChallenge(game)def champDefendsWithTie(historyTeamList,game):    belt,challenger=getBeltAndChallenge(historyTeamList,game)    belt.addToReign(game)    challenger.addChallenge(game)def newChamp(historyTeamList,game):    belt,challenger=getBeltAndChallenge(historyTeamList,game)    belt.endReign(game)    challenger.startReign(game)    challenger.addChallenge(game)def getBeltAndChallenge(historyTeamList,game):    return findTeam(historyTeamList,game.defending),findTeam(historyTeamList,game.challenger)def checkHistoryList(teamList,season,team):    teamNames=getTeamNames(teamList)    if team not in teamNames:        newTeam=Team(team)        newTeam.seasonsPlayed.append(season)        teamList.append(newTeam)    else:        theTeam=findTeam(teamList,team)        theTeam.seasonsPlayed.append(season)def findTeam(teamList,team):    theTeam=[x for x in teamList if x.name==team]    if len(theTeam)==0: return None    return theTeam[0]def findBouts(boutList,gameList,champ):        for game in gameList:        game.addStakes(champ)        champ=checkBouts(boutList,game,champ)    return champdef checkBouts(boutList,game,champ):    if champ==None:        game.titleFight()    elif game.teamA == champ or game.teamB==champ:        game.titleFight()    if game.bout:        boutList.append(game)        if game.checkTie():            return champ        else:            winner,loser=game.getWinnerLoser()            return winner    else:        return champdef processGameFile(season,gameFile,teamList):    gameList=[]    with open(gameFile,'r') as g:        reader=csv.reader(g)        for row in reader:            newGame=readGameFromRow(row)            if bothTeamsOnList(teamList,newGame):                gameList.append(newGame)    return gameListdef readGameFromRow(row):    gameID=row[0]    week=row[1]    date=row[2]    teamA=row[3]    scoreA=int(row[4])    teamB=row[5]    scoreB=int(row[6])    return Game(teamA,teamB,scoreA,scoreB,date)def bothTeamsOnList(teamList,game):    if (game.teamA in teamList) and (game.teamB in teamList):        return True    else:        return Falsedef getTeamNames(teamList):    return [x.name for x in teamList]def findSeasonTeams(teamFile):    teamList=[]    with open(teamFile,'r') as t:        reader=csv.reader(t)        for row in reader:            teamList.append(row[1])    return teamListdef printGames(gameList):    bouts=[x for x in gameList if x.bout]    for match in bouts:        print("\t%s" % match)def activeHistoryTeams(allTime,season):    return [x for x in allTime if x.name in season]if __name__=="__main__":    main()